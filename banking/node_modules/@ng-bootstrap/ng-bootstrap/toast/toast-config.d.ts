import { NgbConfig } from '../ngb-config';
/**
 * Interface used to type all toast config options. See `NgbToastConfig`.
 *
 * @since 5.0.0
 */
import * as ɵngcc0 from '@angular/core';
export interface NgbToastOptions {
    /**
     * Specify if the toast component should emit the `hide()` output
     * after a certain `delay` in ms.
     */
    autohide?: boolean;
    /**
     * Delay in ms after which the `hide()` output should be emitted.
     */
    delay?: number;
    /**
     * Type of aria-live attribute to be used.
     *
     * Could be one of these 2 values (as string):
     * - `polite` (default)
     * - `alert`
     */
    ariaLive?: 'polite' | 'alert';
}
/**
 * Configuration service for the NgbToast component. You can inject this service, typically in your root component,
 * and customize the values of its properties in order to provide default values for all the toasts used in the
 * application.
 *
 * @since 5.0.0
 */
export declare class NgbToastConfig implements NgbToastOptions {
    private _ngbConfig;
    autohide: boolean;
    delay: number;
    ariaLive: 'polite' | 'alert';
    private _animation;
    constructor(_ngbConfig: NgbConfig);
    get animation(): boolean;
    set animation(animation: boolean);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgbToastConfig, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9hc3QtY29uZmlnLmQudHMiLCJzb3VyY2VzIjpbInRvYXN0LWNvbmZpZy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdiQ29uZmlnIH0gZnJvbSAnLi4vbmdiLWNvbmZpZyc7XHJcbi8qKlxyXG4gKiBJbnRlcmZhY2UgdXNlZCB0byB0eXBlIGFsbCB0b2FzdCBjb25maWcgb3B0aW9ucy4gU2VlIGBOZ2JUb2FzdENvbmZpZ2AuXHJcbiAqXHJcbiAqIEBzaW5jZSA1LjAuMFxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOZ2JUb2FzdE9wdGlvbnMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBTcGVjaWZ5IGlmIHRoZSB0b2FzdCBjb21wb25lbnQgc2hvdWxkIGVtaXQgdGhlIGBoaWRlKClgIG91dHB1dFxyXG4gICAgICogYWZ0ZXIgYSBjZXJ0YWluIGBkZWxheWAgaW4gbXMuXHJcbiAgICAgKi9cclxuICAgIGF1dG9oaWRlPzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogRGVsYXkgaW4gbXMgYWZ0ZXIgd2hpY2ggdGhlIGBoaWRlKClgIG91dHB1dCBzaG91bGQgYmUgZW1pdHRlZC5cclxuICAgICAqL1xyXG4gICAgZGVsYXk/OiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFR5cGUgb2YgYXJpYS1saXZlIGF0dHJpYnV0ZSB0byBiZSB1c2VkLlxyXG4gICAgICpcclxuICAgICAqIENvdWxkIGJlIG9uZSBvZiB0aGVzZSAyIHZhbHVlcyAoYXMgc3RyaW5nKTpcclxuICAgICAqIC0gYHBvbGl0ZWAgKGRlZmF1bHQpXHJcbiAgICAgKiAtIGBhbGVydGBcclxuICAgICAqL1xyXG4gICAgYXJpYUxpdmU/OiAncG9saXRlJyB8ICdhbGVydCc7XHJcbn1cclxuLyoqXHJcbiAqIENvbmZpZ3VyYXRpb24gc2VydmljZSBmb3IgdGhlIE5nYlRvYXN0IGNvbXBvbmVudC4gWW91IGNhbiBpbmplY3QgdGhpcyBzZXJ2aWNlLCB0eXBpY2FsbHkgaW4geW91ciByb290IGNvbXBvbmVudCxcclxuICogYW5kIGN1c3RvbWl6ZSB0aGUgdmFsdWVzIG9mIGl0cyBwcm9wZXJ0aWVzIGluIG9yZGVyIHRvIHByb3ZpZGUgZGVmYXVsdCB2YWx1ZXMgZm9yIGFsbCB0aGUgdG9hc3RzIHVzZWQgaW4gdGhlXHJcbiAqIGFwcGxpY2F0aW9uLlxyXG4gKlxyXG4gKiBAc2luY2UgNS4wLjBcclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nYlRvYXN0Q29uZmlnIGltcGxlbWVudHMgTmdiVG9hc3RPcHRpb25zIHtcclxuICAgIHByaXZhdGUgX25nYkNvbmZpZztcclxuICAgIGF1dG9oaWRlOiBib29sZWFuO1xyXG4gICAgZGVsYXk6IG51bWJlcjtcclxuICAgIGFyaWFMaXZlOiAncG9saXRlJyB8ICdhbGVydCc7XHJcbiAgICBwcml2YXRlIF9hbmltYXRpb247XHJcbiAgICBjb25zdHJ1Y3RvcihfbmdiQ29uZmlnOiBOZ2JDb25maWcpO1xyXG4gICAgZ2V0IGFuaW1hdGlvbigpOiBib29sZWFuO1xyXG4gICAgc2V0IGFuaW1hdGlvbihhbmltYXRpb246IGJvb2xlYW4pO1xyXG59XHJcbiJdfQ==