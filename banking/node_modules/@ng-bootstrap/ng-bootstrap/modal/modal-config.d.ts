import { Injector } from '@angular/core';
import { NgbConfig } from '../ngb-config';
/**
 * Options available when opening new modal windows with `NgbModal.open()` method.
 */
import * as ɵngcc0 from '@angular/core';
export interface NgbModalOptions {
    /**
     * If `true`, modal opening and closing will be animated.
     *
     * @since 8.0.0
     */
    animation?: boolean;
    /**
     * `aria-labelledby` attribute value to set on the modal window.
     *
     * @since 2.2.0
     */
    ariaLabelledBy?: string;
    /**
     * `aria-describedby` attribute value to set on the modal window.
     *
     * @since 6.1.0
     */
    ariaDescribedBy?: string;
    /**
     * If `true`, the backdrop element will be created for a given modal.
     *
     * Alternatively, specify `'static'` for a backdrop which doesn't close the modal on click.
     *
     * Default value is `true`.
     */
    backdrop?: boolean | 'static';
    /**
     * Callback right before the modal will be dismissed.
     *
     * If this function returns:
     * * `false`
     * * a promise resolved with `false`
     * * a promise that is rejected
     *
     * then the modal won't be dismissed.
     */
    beforeDismiss?: () => boolean | Promise<boolean>;
    /**
     * If `true`, the modal will be centered vertically.
     *
     * Default value is `false`.
     *
     * @since 1.1.0
     */
    centered?: boolean;
    /**
     * A selector specifying the element all new modal windows should be appended to.
     * Since v5.3.0 it is also possible to pass the reference to an `HTMLElement`.
     *
     * If not specified, will be `body`.
     */
    container?: string | HTMLElement;
    /**
     * The `Injector` to use for modal content.
     */
    injector?: Injector;
    /**
     * If `true`, the modal will be closed when `Escape` key is pressed
     *
     * Default value is `true`.
     */
    keyboard?: boolean;
    /**
     * Scrollable modal content (false by default).
     *
     * @since 5.0.0
     */
    scrollable?: boolean;
    /**
     * Size of a new modal window.
     */
    size?: 'sm' | 'lg' | 'xl' | string;
    /**
     * A custom class to append to the modal window.
     */
    windowClass?: string;
    /**
     * A custom class to append to the modal dialog.
     *
     * @since 9.1.0
     */
    modalDialogClass?: string;
    /**
     * A custom class to append to the modal backdrop.
     *
     * @since 1.1.0
     */
    backdropClass?: string;
}
/**
 * A configuration service for the [`NgbModal`](#/components/modal/api#NgbModal) service.
 *
 * You can inject this service, typically in your root component, and customize the values of its properties in
 * order to provide default values for all modals used in the application.
*
* @since 3.1.0
*/
export declare class NgbModalConfig implements Required<NgbModalOptions> {
    private _ngbConfig;
    ariaLabelledBy: string;
    ariaDescribedBy: string;
    backdrop: boolean | 'static';
    beforeDismiss: () => boolean | Promise<boolean>;
    centered: boolean;
    container: string;
    injector: Injector;
    keyboard: boolean;
    scrollable: boolean;
    size: 'sm' | 'lg' | 'xl' | string;
    windowClass: string;
    modalDialogClass: string;
    backdropClass: string;
    private _animation;
    constructor(_ngbConfig: NgbConfig);
    get animation(): boolean;
    set animation(animation: boolean);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgbModalConfig, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwtY29uZmlnLmQudHMiLCJzb3VyY2VzIjpbIm1vZGFsLWNvbmZpZy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmdiQ29uZmlnIH0gZnJvbSAnLi4vbmdiLWNvbmZpZyc7XHJcbi8qKlxyXG4gKiBPcHRpb25zIGF2YWlsYWJsZSB3aGVuIG9wZW5pbmcgbmV3IG1vZGFsIHdpbmRvd3Mgd2l0aCBgTmdiTW9kYWwub3BlbigpYCBtZXRob2QuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE5nYk1vZGFsT3B0aW9ucyB7XHJcbiAgICAvKipcclxuICAgICAqIElmIGB0cnVlYCwgbW9kYWwgb3BlbmluZyBhbmQgY2xvc2luZyB3aWxsIGJlIGFuaW1hdGVkLlxyXG4gICAgICpcclxuICAgICAqIEBzaW5jZSA4LjAuMFxyXG4gICAgICovXHJcbiAgICBhbmltYXRpb24/OiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBgYXJpYS1sYWJlbGxlZGJ5YCBhdHRyaWJ1dGUgdmFsdWUgdG8gc2V0IG9uIHRoZSBtb2RhbCB3aW5kb3cuXHJcbiAgICAgKlxyXG4gICAgICogQHNpbmNlIDIuMi4wXHJcbiAgICAgKi9cclxuICAgIGFyaWFMYWJlbGxlZEJ5Pzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBgYXJpYS1kZXNjcmliZWRieWAgYXR0cmlidXRlIHZhbHVlIHRvIHNldCBvbiB0aGUgbW9kYWwgd2luZG93LlxyXG4gICAgICpcclxuICAgICAqIEBzaW5jZSA2LjEuMFxyXG4gICAgICovXHJcbiAgICBhcmlhRGVzY3JpYmVkQnk/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGVsZW1lbnQgd2lsbCBiZSBjcmVhdGVkIGZvciBhIGdpdmVuIG1vZGFsLlxyXG4gICAgICpcclxuICAgICAqIEFsdGVybmF0aXZlbHksIHNwZWNpZnkgYCdzdGF0aWMnYCBmb3IgYSBiYWNrZHJvcCB3aGljaCBkb2Vzbid0IGNsb3NlIHRoZSBtb2RhbCBvbiBjbGljay5cclxuICAgICAqXHJcbiAgICAgKiBEZWZhdWx0IHZhbHVlIGlzIGB0cnVlYC5cclxuICAgICAqL1xyXG4gICAgYmFja2Ryb3A/OiBib29sZWFuIHwgJ3N0YXRpYyc7XHJcbiAgICAvKipcclxuICAgICAqIENhbGxiYWNrIHJpZ2h0IGJlZm9yZSB0aGUgbW9kYWwgd2lsbCBiZSBkaXNtaXNzZWQuXHJcbiAgICAgKlxyXG4gICAgICogSWYgdGhpcyBmdW5jdGlvbiByZXR1cm5zOlxyXG4gICAgICogKiBgZmFsc2VgXHJcbiAgICAgKiAqIGEgcHJvbWlzZSByZXNvbHZlZCB3aXRoIGBmYWxzZWBcclxuICAgICAqICogYSBwcm9taXNlIHRoYXQgaXMgcmVqZWN0ZWRcclxuICAgICAqXHJcbiAgICAgKiB0aGVuIHRoZSBtb2RhbCB3b24ndCBiZSBkaXNtaXNzZWQuXHJcbiAgICAgKi9cclxuICAgIGJlZm9yZURpc21pc3M/OiAoKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjtcclxuICAgIC8qKlxyXG4gICAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBiZSBjZW50ZXJlZCB2ZXJ0aWNhbGx5LlxyXG4gICAgICpcclxuICAgICAqIERlZmF1bHQgdmFsdWUgaXMgYGZhbHNlYC5cclxuICAgICAqXHJcbiAgICAgKiBAc2luY2UgMS4xLjBcclxuICAgICAqL1xyXG4gICAgY2VudGVyZWQ/OiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIHNlbGVjdG9yIHNwZWNpZnlpbmcgdGhlIGVsZW1lbnQgYWxsIG5ldyBtb2RhbCB3aW5kb3dzIHNob3VsZCBiZSBhcHBlbmRlZCB0by5cclxuICAgICAqIFNpbmNlIHY1LjMuMCBpdCBpcyBhbHNvIHBvc3NpYmxlIHRvIHBhc3MgdGhlIHJlZmVyZW5jZSB0byBhbiBgSFRNTEVsZW1lbnRgLlxyXG4gICAgICpcclxuICAgICAqIElmIG5vdCBzcGVjaWZpZWQsIHdpbGwgYmUgYGJvZHlgLlxyXG4gICAgICovXHJcbiAgICBjb250YWluZXI/OiBzdHJpbmcgfCBIVE1MRWxlbWVudDtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGBJbmplY3RvcmAgdG8gdXNlIGZvciBtb2RhbCBjb250ZW50LlxyXG4gICAgICovXHJcbiAgICBpbmplY3Rvcj86IEluamVjdG9yO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIGJlIGNsb3NlZCB3aGVuIGBFc2NhcGVgIGtleSBpcyBwcmVzc2VkXHJcbiAgICAgKlxyXG4gICAgICogRGVmYXVsdCB2YWx1ZSBpcyBgdHJ1ZWAuXHJcbiAgICAgKi9cclxuICAgIGtleWJvYXJkPzogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogU2Nyb2xsYWJsZSBtb2RhbCBjb250ZW50IChmYWxzZSBieSBkZWZhdWx0KS5cclxuICAgICAqXHJcbiAgICAgKiBAc2luY2UgNS4wLjBcclxuICAgICAqL1xyXG4gICAgc2Nyb2xsYWJsZT86IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIFNpemUgb2YgYSBuZXcgbW9kYWwgd2luZG93LlxyXG4gICAgICovXHJcbiAgICBzaXplPzogJ3NtJyB8ICdsZycgfCAneGwnIHwgc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGN1c3RvbSBjbGFzcyB0byBhcHBlbmQgdG8gdGhlIG1vZGFsIHdpbmRvdy5cclxuICAgICAqL1xyXG4gICAgd2luZG93Q2xhc3M/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIEEgY3VzdG9tIGNsYXNzIHRvIGFwcGVuZCB0byB0aGUgbW9kYWwgZGlhbG9nLlxyXG4gICAgICpcclxuICAgICAqIEBzaW5jZSA5LjEuMFxyXG4gICAgICovXHJcbiAgICBtb2RhbERpYWxvZ0NsYXNzPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGN1c3RvbSBjbGFzcyB0byBhcHBlbmQgdG8gdGhlIG1vZGFsIGJhY2tkcm9wLlxyXG4gICAgICpcclxuICAgICAqIEBzaW5jZSAxLjEuMFxyXG4gICAgICovXHJcbiAgICBiYWNrZHJvcENsYXNzPzogc3RyaW5nO1xyXG59XHJcbi8qKlxyXG4gKiBBIGNvbmZpZ3VyYXRpb24gc2VydmljZSBmb3IgdGhlIFtgTmdiTW9kYWxgXSgjL2NvbXBvbmVudHMvbW9kYWwvYXBpI05nYk1vZGFsKSBzZXJ2aWNlLlxyXG4gKlxyXG4gKiBZb3UgY2FuIGluamVjdCB0aGlzIHNlcnZpY2UsIHR5cGljYWxseSBpbiB5b3VyIHJvb3QgY29tcG9uZW50LCBhbmQgY3VzdG9taXplIHRoZSB2YWx1ZXMgb2YgaXRzIHByb3BlcnRpZXMgaW5cclxuICogb3JkZXIgdG8gcHJvdmlkZSBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIG1vZGFscyB1c2VkIGluIHRoZSBhcHBsaWNhdGlvbi5cclxuKlxyXG4qIEBzaW5jZSAzLjEuMFxyXG4qL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ2JNb2RhbENvbmZpZyBpbXBsZW1lbnRzIFJlcXVpcmVkPE5nYk1vZGFsT3B0aW9ucz4ge1xyXG4gICAgcHJpdmF0ZSBfbmdiQ29uZmlnO1xyXG4gICAgYXJpYUxhYmVsbGVkQnk6IHN0cmluZztcclxuICAgIGFyaWFEZXNjcmliZWRCeTogc3RyaW5nO1xyXG4gICAgYmFja2Ryb3A6IGJvb2xlYW4gfCAnc3RhdGljJztcclxuICAgIGJlZm9yZURpc21pc3M6ICgpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xyXG4gICAgY2VudGVyZWQ6IGJvb2xlYW47XHJcbiAgICBjb250YWluZXI6IHN0cmluZztcclxuICAgIGluamVjdG9yOiBJbmplY3RvcjtcclxuICAgIGtleWJvYXJkOiBib29sZWFuO1xyXG4gICAgc2Nyb2xsYWJsZTogYm9vbGVhbjtcclxuICAgIHNpemU6ICdzbScgfCAnbGcnIHwgJ3hsJyB8IHN0cmluZztcclxuICAgIHdpbmRvd0NsYXNzOiBzdHJpbmc7XHJcbiAgICBtb2RhbERpYWxvZ0NsYXNzOiBzdHJpbmc7XHJcbiAgICBiYWNrZHJvcENsYXNzOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIF9hbmltYXRpb247XHJcbiAgICBjb25zdHJ1Y3RvcihfbmdiQ29uZmlnOiBOZ2JDb25maWcpO1xyXG4gICAgZ2V0IGFuaW1hdGlvbigpOiBib29sZWFuO1xyXG4gICAgc2V0IGFuaW1hdGlvbihhbmltYXRpb246IGJvb2xlYW4pO1xyXG59XHJcbiJdfQ==