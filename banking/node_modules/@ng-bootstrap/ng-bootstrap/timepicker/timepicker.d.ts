import { ChangeDetectorRef, OnChanges, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { NgbTime } from './ngb-time';
import { NgbTimepickerConfig } from './timepicker-config';
import { NgbTimeAdapter } from './ngb-time-adapter';
import { NgbTimepickerI18n } from './timepicker-i18n';
/**
 * A directive that helps with wth picking hours, minutes and seconds.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NgbTimepicker implements ControlValueAccessor, OnChanges {
    private readonly _config;
    private _ngbTimeAdapter;
    private _cd;
    i18n: NgbTimepickerI18n;
    static ngAcceptInputType_size: string;
    disabled: boolean;
    model: NgbTime;
    private _hourStep;
    private _minuteStep;
    private _secondStep;
    /**
     * Whether to display 12H or 24H mode.
     */
    meridian: boolean;
    /**
     * If `true`, the spinners above and below inputs are visible.
     */
    spinners: boolean;
    /**
     * If `true`, it is possible to select seconds.
     */
    seconds: boolean;
    /**
     * The number of hours to add/subtract when clicking hour spinners.
     */
    set hourStep(step: number);
    get hourStep(): number;
    /**
     * The number of minutes to add/subtract when clicking minute spinners.
     */
    set minuteStep(step: number);
    get minuteStep(): number;
    /**
     * The number of seconds to add/subtract when clicking second spinners.
     */
    set secondStep(step: number);
    get secondStep(): number;
    /**
     * If `true`, the timepicker is readonly and can't be changed.
     */
    readonlyInputs: boolean;
    /**
     * The size of inputs and buttons.
     */
    size: 'small' | 'medium' | 'large';
    constructor(_config: NgbTimepickerConfig, _ngbTimeAdapter: NgbTimeAdapter<any>, _cd: ChangeDetectorRef, i18n: NgbTimepickerI18n);
    onChange: (_: any) => void;
    onTouched: () => void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    setDisabledState(isDisabled: boolean): void;
    changeHour(step: number): void;
    changeMinute(step: number): void;
    changeSecond(step: number): void;
    updateHour(newVal: string): void;
    updateMinute(newVal: string): void;
    updateSecond(newVal: string): void;
    toggleMeridian(): void;
    formatInput(input: HTMLInputElement): void;
    formatHour(value?: number): string;
    formatMinSec(value?: number): string;
    handleBlur(): void;
    get isSmallSize(): boolean;
    get isLargeSize(): boolean;
    ngOnChanges(changes: SimpleChanges): void;
    private propagateModelChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgbTimepicker, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgbTimepicker, "ngb-timepicker", never, { "meridian": "meridian"; "spinners": "spinners"; "seconds": "seconds"; "hourStep": "hourStep"; "minuteStep": "minuteStep"; "secondStep": "secondStep"; "readonlyInputs": "readonlyInputs"; "size": "size"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZXBpY2tlci5kLnRzIiwic291cmNlcyI6WyJ0aW1lcGlja2VyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgTmdiVGltZSB9IGZyb20gJy4vbmdiLXRpbWUnO1xyXG5pbXBvcnQgeyBOZ2JUaW1lcGlja2VyQ29uZmlnIH0gZnJvbSAnLi90aW1lcGlja2VyLWNvbmZpZyc7XHJcbmltcG9ydCB7IE5nYlRpbWVBZGFwdGVyIH0gZnJvbSAnLi9uZ2ItdGltZS1hZGFwdGVyJztcclxuaW1wb3J0IHsgTmdiVGltZXBpY2tlckkxOG4gfSBmcm9tICcuL3RpbWVwaWNrZXItaTE4bic7XHJcbi8qKlxyXG4gKiBBIGRpcmVjdGl2ZSB0aGF0IGhlbHBzIHdpdGggd3RoIHBpY2tpbmcgaG91cnMsIG1pbnV0ZXMgYW5kIHNlY29uZHMuXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ2JUaW1lcGlja2VyIGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uQ2hhbmdlcyB7XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jb25maWc7XHJcbiAgICBwcml2YXRlIF9uZ2JUaW1lQWRhcHRlcjtcclxuICAgIHByaXZhdGUgX2NkO1xyXG4gICAgaTE4bjogTmdiVGltZXBpY2tlckkxOG47XHJcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfc2l6ZTogc3RyaW5nO1xyXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBtb2RlbDogTmdiVGltZTtcclxuICAgIHByaXZhdGUgX2hvdXJTdGVwO1xyXG4gICAgcHJpdmF0ZSBfbWludXRlU3RlcDtcclxuICAgIHByaXZhdGUgX3NlY29uZFN0ZXA7XHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdG8gZGlzcGxheSAxMkggb3IgMjRIIG1vZGUuXHJcbiAgICAgKi9cclxuICAgIG1lcmlkaWFuOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBJZiBgdHJ1ZWAsIHRoZSBzcGlubmVycyBhYm92ZSBhbmQgYmVsb3cgaW5wdXRzIGFyZSB2aXNpYmxlLlxyXG4gICAgICovXHJcbiAgICBzcGlubmVyczogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogSWYgYHRydWVgLCBpdCBpcyBwb3NzaWJsZSB0byBzZWxlY3Qgc2Vjb25kcy5cclxuICAgICAqL1xyXG4gICAgc2Vjb25kczogYm9vbGVhbjtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIG51bWJlciBvZiBob3VycyB0byBhZGQvc3VidHJhY3Qgd2hlbiBjbGlja2luZyBob3VyIHNwaW5uZXJzLlxyXG4gICAgICovXHJcbiAgICBzZXQgaG91clN0ZXAoc3RlcDogbnVtYmVyKTtcclxuICAgIGdldCBob3VyU3RlcCgpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBudW1iZXIgb2YgbWludXRlcyB0byBhZGQvc3VidHJhY3Qgd2hlbiBjbGlja2luZyBtaW51dGUgc3Bpbm5lcnMuXHJcbiAgICAgKi9cclxuICAgIHNldCBtaW51dGVTdGVwKHN0ZXA6IG51bWJlcik7XHJcbiAgICBnZXQgbWludXRlU3RlcCgpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyB0byBhZGQvc3VidHJhY3Qgd2hlbiBjbGlja2luZyBzZWNvbmQgc3Bpbm5lcnMuXHJcbiAgICAgKi9cclxuICAgIHNldCBzZWNvbmRTdGVwKHN0ZXA6IG51bWJlcik7XHJcbiAgICBnZXQgc2Vjb25kU3RlcCgpOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIElmIGB0cnVlYCwgdGhlIHRpbWVwaWNrZXIgaXMgcmVhZG9ubHkgYW5kIGNhbid0IGJlIGNoYW5nZWQuXHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5SW5wdXRzOiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgc2l6ZSBvZiBpbnB1dHMgYW5kIGJ1dHRvbnMuXHJcbiAgICAgKi9cclxuICAgIHNpemU6ICdzbWFsbCcgfCAnbWVkaXVtJyB8ICdsYXJnZSc7XHJcbiAgICBjb25zdHJ1Y3RvcihfY29uZmlnOiBOZ2JUaW1lcGlja2VyQ29uZmlnLCBfbmdiVGltZUFkYXB0ZXI6IE5nYlRpbWVBZGFwdGVyPGFueT4sIF9jZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIGkxOG46IE5nYlRpbWVwaWNrZXJJMThuKTtcclxuICAgIG9uQ2hhbmdlOiAoXzogYW55KSA9PiB2b2lkO1xyXG4gICAgb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46ICh2YWx1ZTogYW55KSA9PiBhbnkpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IGFueSk6IHZvaWQ7XHJcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgY2hhbmdlSG91cihzdGVwOiBudW1iZXIpOiB2b2lkO1xyXG4gICAgY2hhbmdlTWludXRlKHN0ZXA6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBjaGFuZ2VTZWNvbmQoc3RlcDogbnVtYmVyKTogdm9pZDtcclxuICAgIHVwZGF0ZUhvdXIobmV3VmFsOiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgdXBkYXRlTWludXRlKG5ld1ZhbDogc3RyaW5nKTogdm9pZDtcclxuICAgIHVwZGF0ZVNlY29uZChuZXdWYWw6IHN0cmluZyk6IHZvaWQ7XHJcbiAgICB0b2dnbGVNZXJpZGlhbigpOiB2b2lkO1xyXG4gICAgZm9ybWF0SW5wdXQoaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQpOiB2b2lkO1xyXG4gICAgZm9ybWF0SG91cih2YWx1ZT86IG51bWJlcik6IHN0cmluZztcclxuICAgIGZvcm1hdE1pblNlYyh2YWx1ZT86IG51bWJlcik6IHN0cmluZztcclxuICAgIGhhbmRsZUJsdXIoKTogdm9pZDtcclxuICAgIGdldCBpc1NtYWxsU2l6ZSgpOiBib29sZWFuO1xyXG4gICAgZ2V0IGlzTGFyZ2VTaXplKCk6IGJvb2xlYW47XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIHByaXZhdGUgcHJvcGFnYXRlTW9kZWxDaGFuZ2U7XHJcbn1cclxuIl19