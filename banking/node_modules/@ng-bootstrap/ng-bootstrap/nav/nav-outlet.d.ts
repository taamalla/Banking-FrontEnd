import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone } from '@angular/core';
import { NgbNav, NgbNavItem } from './nav';
import * as ɵngcc0 from '@angular/core';
export declare class NgbNavPane {
    elRef: ElementRef<HTMLElement>;
    item: NgbNavItem;
    nav: NgbNav;
    role: string;
    constructor(elRef: ElementRef<HTMLElement>);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgbNavPane, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgbNavPane, "[ngbNavPane]", never, { "item": "item"; "nav": "nav"; "role": "role"; }, {}, never>;
}
/**
 * The outlet where currently active nav content will be displayed.
 *
 * @since 5.2.0
 */
export declare class NgbNavOutlet implements AfterViewInit {
    private _cd;
    private _ngZone;
    private _activePane;
    private _panes;
    /**
     * A role to set on the nav pane
     */
    paneRole: any;
    /**
     * Reference to the `NgbNav`
     */
    nav: NgbNav;
    constructor(_cd: ChangeDetectorRef, _ngZone: NgZone);
    isPanelTransitioning(item: NgbNavItem): boolean;
    ngAfterViewInit(): void;
    private _updateActivePane;
    private _getPaneForItem;
    private _getActivePane;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgbNavOutlet, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgbNavOutlet, "[ngbNavOutlet]", never, { "paneRole": "paneRole"; "nav": "ngbNavOutlet"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LW91dGxldC5kLnRzIiwic291cmNlcyI6WyJuYXYtb3V0bGV0LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmdiTmF2LCBOZ2JOYXZJdGVtIH0gZnJvbSAnLi9uYXYnO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ2JOYXZQYW5lIHtcclxuICAgIGVsUmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcclxuICAgIGl0ZW06IE5nYk5hdkl0ZW07XHJcbiAgICBuYXY6IE5nYk5hdjtcclxuICAgIHJvbGU6IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKGVsUmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50Pik7XHJcbn1cclxuLyoqXHJcbiAqIFRoZSBvdXRsZXQgd2hlcmUgY3VycmVudGx5IGFjdGl2ZSBuYXYgY29udGVudCB3aWxsIGJlIGRpc3BsYXllZC5cclxuICpcclxuICogQHNpbmNlIDUuMi4wXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ2JOYXZPdXRsZXQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuICAgIHByaXZhdGUgX2NkO1xyXG4gICAgcHJpdmF0ZSBfbmdab25lO1xyXG4gICAgcHJpdmF0ZSBfYWN0aXZlUGFuZTtcclxuICAgIHByaXZhdGUgX3BhbmVzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIHJvbGUgdG8gc2V0IG9uIHRoZSBuYXYgcGFuZVxyXG4gICAgICovXHJcbiAgICBwYW5lUm9sZTogYW55O1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZWZlcmVuY2UgdG8gdGhlIGBOZ2JOYXZgXHJcbiAgICAgKi9cclxuICAgIG5hdjogTmdiTmF2O1xyXG4gICAgY29uc3RydWN0b3IoX2NkOiBDaGFuZ2VEZXRlY3RvclJlZiwgX25nWm9uZTogTmdab25lKTtcclxuICAgIGlzUGFuZWxUcmFuc2l0aW9uaW5nKGl0ZW06IE5nYk5hdkl0ZW0pOiBib29sZWFuO1xyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XHJcbiAgICBwcml2YXRlIF91cGRhdGVBY3RpdmVQYW5lO1xyXG4gICAgcHJpdmF0ZSBfZ2V0UGFuZUZvckl0ZW07XHJcbiAgICBwcml2YXRlIF9nZXRBY3RpdmVQYW5lO1xyXG59XHJcbiJdfQ==