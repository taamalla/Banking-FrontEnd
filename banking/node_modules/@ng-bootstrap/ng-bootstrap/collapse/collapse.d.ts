import { ElementRef, EventEmitter, NgZone, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { NgbCollapseConfig } from './collapse-config';
/**
 * A directive to provide a simple way of hiding and showing elements on the page.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NgbCollapse implements OnInit, OnChanges {
    private _element;
    private _zone;
    /**
     * If `true`, collapse will be animated.
     *
     * Animation is triggered only when clicked on triggering element
     * or via the `.toggle()` function
     *
     * @since 8.0.0
     */
    animation: any;
    /**
     * If `true`, will collapse the element or show it otherwise.
     */
    collapsed: boolean;
    ngbCollapseChange: EventEmitter<boolean>;
    /**
     * An event emitted when the collapse element is shown, after the transition. It has no payload.
     *
     * @since 8.0.0
     */
    shown: EventEmitter<void>;
    /**
     * An event emitted when the collapse element is hidden, after the transition. It has no payload.
     *
     * @since 8.0.0
     */
    hidden: EventEmitter<void>;
    constructor(_element: ElementRef, config: NgbCollapseConfig, _zone: NgZone);
    ngOnInit(): void;
    ngOnChanges({ collapsed }: SimpleChanges): void;
    /**
     * Triggers collapsing programmatically.
     *
     * If there is a collapsing transition running already, it will be reversed.
     * If the animations are turned off this happens synchronously.
     *
     * @since 8.0.0
     */
    toggle(open?: boolean): void;
    private _runTransition;
    private _runTransitionWithEvents;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgbCollapse, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgbCollapse, "[ngbCollapse]", ["ngbCollapse"], { "collapsed": "ngbCollapse"; "animation": "animation"; }, { "ngbCollapseChange": "ngbCollapseChange"; "shown": "shown"; "hidden": "hidden"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGFwc2UuZC50cyIsInNvdXJjZXMiOlsiY29sbGFwc2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ2JDb2xsYXBzZUNvbmZpZyB9IGZyb20gJy4vY29sbGFwc2UtY29uZmlnJztcclxuLyoqXHJcbiAqIEEgZGlyZWN0aXZlIHRvIHByb3ZpZGUgYSBzaW1wbGUgd2F5IG9mIGhpZGluZyBhbmQgc2hvd2luZyBlbGVtZW50cyBvbiB0aGUgcGFnZS5cclxuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nYkNvbGxhcHNlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gICAgcHJpdmF0ZSBfZWxlbWVudDtcclxuICAgIHByaXZhdGUgX3pvbmU7XHJcbiAgICAvKipcclxuICAgICAqIElmIGB0cnVlYCwgY29sbGFwc2Ugd2lsbCBiZSBhbmltYXRlZC5cclxuICAgICAqXHJcbiAgICAgKiBBbmltYXRpb24gaXMgdHJpZ2dlcmVkIG9ubHkgd2hlbiBjbGlja2VkIG9uIHRyaWdnZXJpbmcgZWxlbWVudFxyXG4gICAgICogb3IgdmlhIHRoZSBgLnRvZ2dsZSgpYCBmdW5jdGlvblxyXG4gICAgICpcclxuICAgICAqIEBzaW5jZSA4LjAuMFxyXG4gICAgICovXHJcbiAgICBhbmltYXRpb246IGFueTtcclxuICAgIC8qKlxyXG4gICAgICogSWYgYHRydWVgLCB3aWxsIGNvbGxhcHNlIHRoZSBlbGVtZW50IG9yIHNob3cgaXQgb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcbiAgICBjb2xsYXBzZWQ6IGJvb2xlYW47XHJcbiAgICBuZ2JDb2xsYXBzZUNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBldmVudCBlbWl0dGVkIHdoZW4gdGhlIGNvbGxhcHNlIGVsZW1lbnQgaXMgc2hvd24sIGFmdGVyIHRoZSB0cmFuc2l0aW9uLiBJdCBoYXMgbm8gcGF5bG9hZC5cclxuICAgICAqXHJcbiAgICAgKiBAc2luY2UgOC4wLjBcclxuICAgICAqL1xyXG4gICAgc2hvd246IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAgIC8qKlxyXG4gICAgICogQW4gZXZlbnQgZW1pdHRlZCB3aGVuIHRoZSBjb2xsYXBzZSBlbGVtZW50IGlzIGhpZGRlbiwgYWZ0ZXIgdGhlIHRyYW5zaXRpb24uIEl0IGhhcyBubyBwYXlsb2FkLlxyXG4gICAgICpcclxuICAgICAqIEBzaW5jZSA4LjAuMFxyXG4gICAgICovXHJcbiAgICBoaWRkZW46IEV2ZW50RW1pdHRlcjx2b2lkPjtcclxuICAgIGNvbnN0cnVjdG9yKF9lbGVtZW50OiBFbGVtZW50UmVmLCBjb25maWc6IE5nYkNvbGxhcHNlQ29uZmlnLCBfem9uZTogTmdab25lKTtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ09uQ2hhbmdlcyh7IGNvbGxhcHNlZCB9OiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogVHJpZ2dlcnMgY29sbGFwc2luZyBwcm9ncmFtbWF0aWNhbGx5LlxyXG4gICAgICpcclxuICAgICAqIElmIHRoZXJlIGlzIGEgY29sbGFwc2luZyB0cmFuc2l0aW9uIHJ1bm5pbmcgYWxyZWFkeSwgaXQgd2lsbCBiZSByZXZlcnNlZC5cclxuICAgICAqIElmIHRoZSBhbmltYXRpb25zIGFyZSB0dXJuZWQgb2ZmIHRoaXMgaGFwcGVucyBzeW5jaHJvbm91c2x5LlxyXG4gICAgICpcclxuICAgICAqIEBzaW5jZSA4LjAuMFxyXG4gICAgICovXHJcbiAgICB0b2dnbGUob3Blbj86IGJvb2xlYW4pOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBfcnVuVHJhbnNpdGlvbjtcclxuICAgIHByaXZhdGUgX3J1blRyYW5zaXRpb25XaXRoRXZlbnRzO1xyXG59XHJcbiJdfQ==