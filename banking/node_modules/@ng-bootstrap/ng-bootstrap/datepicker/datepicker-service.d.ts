import { NgbCalendar } from './ngb-calendar';
import { NgbDate } from './ngb-date';
import { NgbDateStruct } from './ngb-date-struct';
import { DatepickerViewModel, NgbDayTemplateData, NgbMarkDisabled } from './datepicker-view-model';
import { Observable } from 'rxjs';
import { NgbDatepickerI18n } from './datepicker-i18n';
import { TranslationWidth } from '@angular/common';
import * as ɵngcc0 from '@angular/core';
export declare type DatepickerServiceInputs = Partial<{
    dayTemplateData: NgbDayTemplateData;
    displayMonths: number;
    disabled: boolean;
    firstDayOfWeek: number;
    focusVisible: boolean;
    markDisabled: NgbMarkDisabled;
    maxDate: NgbDate | null;
    minDate: NgbDate | null;
    navigation: 'select' | 'arrows' | 'none';
    outsideDays: 'visible' | 'collapsed' | 'hidden';
    weekdays: TranslationWidth | boolean;
}>;
export declare class NgbDatepickerService {
    private _calendar;
    private _i18n;
    private _VALIDATORS;
    private _model$;
    private _dateSelect$;
    private _state;
    get model$(): Observable<DatepickerViewModel>;
    get dateSelect$(): Observable<NgbDate>;
    set(options: DatepickerServiceInputs): void;
    constructor(_calendar: NgbCalendar, _i18n: NgbDatepickerI18n);
    focus(date?: NgbDate | null): void;
    focusSelect(): void;
    open(date?: NgbDate | null): void;
    select(date?: NgbDate | null, options?: {
        emitEvent?: boolean;
    }): void;
    toValidDate(date?: NgbDateStruct | null, defaultValue?: NgbDate | null): NgbDate | null;
    getMonth(struct: NgbDateStruct): import("./datepicker-view-model").MonthViewModel;
    private _nextState;
    private _patchContexts;
    private _updateState;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgbDatepickerService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NgbDatepickerService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImRhdGVwaWNrZXItc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdiQ2FsZW5kYXIgfSBmcm9tICcuL25nYi1jYWxlbmRhcic7XHJcbmltcG9ydCB7IE5nYkRhdGUgfSBmcm9tICcuL25nYi1kYXRlJztcclxuaW1wb3J0IHsgTmdiRGF0ZVN0cnVjdCB9IGZyb20gJy4vbmdiLWRhdGUtc3RydWN0JztcclxuaW1wb3J0IHsgRGF0ZXBpY2tlclZpZXdNb2RlbCwgTmdiRGF5VGVtcGxhdGVEYXRhLCBOZ2JNYXJrRGlzYWJsZWQgfSBmcm9tICcuL2RhdGVwaWNrZXItdmlldy1tb2RlbCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgTmdiRGF0ZXBpY2tlckkxOG4gfSBmcm9tICcuL2RhdGVwaWNrZXItaTE4bic7XHJcbmltcG9ydCB7IFRyYW5zbGF0aW9uV2lkdGggfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5leHBvcnQgZGVjbGFyZSB0eXBlIERhdGVwaWNrZXJTZXJ2aWNlSW5wdXRzID0gUGFydGlhbDx7XHJcbiAgICBkYXlUZW1wbGF0ZURhdGE6IE5nYkRheVRlbXBsYXRlRGF0YTtcclxuICAgIGRpc3BsYXlNb250aHM6IG51bWJlcjtcclxuICAgIGRpc2FibGVkOiBib29sZWFuO1xyXG4gICAgZmlyc3REYXlPZldlZWs6IG51bWJlcjtcclxuICAgIGZvY3VzVmlzaWJsZTogYm9vbGVhbjtcclxuICAgIG1hcmtEaXNhYmxlZDogTmdiTWFya0Rpc2FibGVkO1xyXG4gICAgbWF4RGF0ZTogTmdiRGF0ZSB8IG51bGw7XHJcbiAgICBtaW5EYXRlOiBOZ2JEYXRlIHwgbnVsbDtcclxuICAgIG5hdmlnYXRpb246ICdzZWxlY3QnIHwgJ2Fycm93cycgfCAnbm9uZSc7XHJcbiAgICBvdXRzaWRlRGF5czogJ3Zpc2libGUnIHwgJ2NvbGxhcHNlZCcgfCAnaGlkZGVuJztcclxuICAgIHdlZWtkYXlzOiBUcmFuc2xhdGlvbldpZHRoIHwgYm9vbGVhbjtcclxufT47XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nYkRhdGVwaWNrZXJTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgX2NhbGVuZGFyO1xyXG4gICAgcHJpdmF0ZSBfaTE4bjtcclxuICAgIHByaXZhdGUgX1ZBTElEQVRPUlM7XHJcbiAgICBwcml2YXRlIF9tb2RlbCQ7XHJcbiAgICBwcml2YXRlIF9kYXRlU2VsZWN0JDtcclxuICAgIHByaXZhdGUgX3N0YXRlO1xyXG4gICAgZ2V0IG1vZGVsJCgpOiBPYnNlcnZhYmxlPERhdGVwaWNrZXJWaWV3TW9kZWw+O1xyXG4gICAgZ2V0IGRhdGVTZWxlY3QkKCk6IE9ic2VydmFibGU8TmdiRGF0ZT47XHJcbiAgICBzZXQob3B0aW9uczogRGF0ZXBpY2tlclNlcnZpY2VJbnB1dHMpOiB2b2lkO1xyXG4gICAgY29uc3RydWN0b3IoX2NhbGVuZGFyOiBOZ2JDYWxlbmRhciwgX2kxOG46IE5nYkRhdGVwaWNrZXJJMThuKTtcclxuICAgIGZvY3VzKGRhdGU/OiBOZ2JEYXRlIHwgbnVsbCk6IHZvaWQ7XHJcbiAgICBmb2N1c1NlbGVjdCgpOiB2b2lkO1xyXG4gICAgb3BlbihkYXRlPzogTmdiRGF0ZSB8IG51bGwpOiB2b2lkO1xyXG4gICAgc2VsZWN0KGRhdGU/OiBOZ2JEYXRlIHwgbnVsbCwgb3B0aW9ucz86IHtcclxuICAgICAgICBlbWl0RXZlbnQ/OiBib29sZWFuO1xyXG4gICAgfSk6IHZvaWQ7XHJcbiAgICB0b1ZhbGlkRGF0ZShkYXRlPzogTmdiRGF0ZVN0cnVjdCB8IG51bGwsIGRlZmF1bHRWYWx1ZT86IE5nYkRhdGUgfCBudWxsKTogTmdiRGF0ZSB8IG51bGw7XHJcbiAgICBnZXRNb250aChzdHJ1Y3Q6IE5nYkRhdGVTdHJ1Y3QpOiBpbXBvcnQoXCIuL2RhdGVwaWNrZXItdmlldy1tb2RlbFwiKS5Nb250aFZpZXdNb2RlbDtcclxuICAgIHByaXZhdGUgX25leHRTdGF0ZTtcclxuICAgIHByaXZhdGUgX3BhdGNoQ29udGV4dHM7XHJcbiAgICBwcml2YXRlIF91cGRhdGVTdGF0ZTtcclxufVxyXG4iXX0=