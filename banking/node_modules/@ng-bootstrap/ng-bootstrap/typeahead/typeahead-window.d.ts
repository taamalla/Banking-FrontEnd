import { EventEmitter, OnInit, TemplateRef } from '@angular/core';
import { toString } from '../util/util';
/**
 * The context for the typeahead result template in case you want to override the default one.
 */
import * as ɵngcc0 from '@angular/core';
export interface ResultTemplateContext {
    /**
     * Your typeahead result item.
     */
    result: any;
    /**
     * Search term from the `<input>` used to get current result.
     */
    term: string;
}
export declare class NgbTypeaheadWindow implements OnInit {
    activeIdx: number;
    /**
     *  The id for the typeahead window. The id should be unique and the same
     *  as the associated typeahead's id.
     */
    id: string;
    /**
     * Flag indicating if the first row should be active initially
     */
    focusFirst: boolean;
    /**
     * Typeahead match results to be displayed
     */
    results: any;
    /**
     * Search term used to get current results
     */
    term: string;
    /**
     * A function used to format a given result before display. This function should return a formatted string without any
     * HTML markup
     */
    formatter: typeof toString;
    /**
     * A template to override a matching result default display
     */
    resultTemplate: TemplateRef<ResultTemplateContext>;
    /**
    * A custom class to append to the typeahead window
     *
     * @since 9.1.0
    */
    popupClass: string;
    /**
     * Event raised when user selects a particular result row
     */
    selectEvent: EventEmitter<any>;
    activeChangeEvent: EventEmitter<any>;
    hasActive(): boolean;
    getActive(): any;
    markActive(activeIdx: number): void;
    next(): void;
    prev(): void;
    resetActive(): void;
    select(item: any): void;
    ngOnInit(): void;
    private _activeChanged;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgbTypeaheadWindow, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgbTypeaheadWindow, "ngb-typeahead-window", ["ngbTypeaheadWindow"], { "focusFirst": "focusFirst"; "formatter": "formatter"; "id": "id"; "results": "results"; "term": "term"; "resultTemplate": "resultTemplate"; "popupClass": "popupClass"; }, { "selectEvent": "select"; "activeChangeEvent": "activeChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZWFoZWFkLXdpbmRvdy5kLnRzIiwic291cmNlcyI6WyJ0eXBlYWhlYWQtd2luZG93LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgdG9TdHJpbmcgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xyXG4vKipcclxuICogVGhlIGNvbnRleHQgZm9yIHRoZSB0eXBlYWhlYWQgcmVzdWx0IHRlbXBsYXRlIGluIGNhc2UgeW91IHdhbnQgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgb25lLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZXN1bHRUZW1wbGF0ZUNvbnRleHQge1xyXG4gICAgLyoqXHJcbiAgICAgKiBZb3VyIHR5cGVhaGVhZCByZXN1bHQgaXRlbS5cclxuICAgICAqL1xyXG4gICAgcmVzdWx0OiBhbnk7XHJcbiAgICAvKipcclxuICAgICAqIFNlYXJjaCB0ZXJtIGZyb20gdGhlIGA8aW5wdXQ+YCB1c2VkIHRvIGdldCBjdXJyZW50IHJlc3VsdC5cclxuICAgICAqL1xyXG4gICAgdGVybTogc3RyaW5nO1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5nYlR5cGVhaGVhZFdpbmRvdyBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBhY3RpdmVJZHg6IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogIFRoZSBpZCBmb3IgdGhlIHR5cGVhaGVhZCB3aW5kb3cuIFRoZSBpZCBzaG91bGQgYmUgdW5pcXVlIGFuZCB0aGUgc2FtZVxyXG4gICAgICogIGFzIHRoZSBhc3NvY2lhdGVkIHR5cGVhaGVhZCdzIGlkLlxyXG4gICAgICovXHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGbGFnIGluZGljYXRpbmcgaWYgdGhlIGZpcnN0IHJvdyBzaG91bGQgYmUgYWN0aXZlIGluaXRpYWxseVxyXG4gICAgICovXHJcbiAgICBmb2N1c0ZpcnN0OiBib29sZWFuO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUeXBlYWhlYWQgbWF0Y2ggcmVzdWx0cyB0byBiZSBkaXNwbGF5ZWRcclxuICAgICAqL1xyXG4gICAgcmVzdWx0czogYW55O1xyXG4gICAgLyoqXHJcbiAgICAgKiBTZWFyY2ggdGVybSB1c2VkIHRvIGdldCBjdXJyZW50IHJlc3VsdHNcclxuICAgICAqL1xyXG4gICAgdGVybTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBIGZ1bmN0aW9uIHVzZWQgdG8gZm9ybWF0IGEgZ2l2ZW4gcmVzdWx0IGJlZm9yZSBkaXNwbGF5LiBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gYSBmb3JtYXR0ZWQgc3RyaW5nIHdpdGhvdXQgYW55XHJcbiAgICAgKiBIVE1MIG1hcmt1cFxyXG4gICAgICovXHJcbiAgICBmb3JtYXR0ZXI6IHR5cGVvZiB0b1N0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQSB0ZW1wbGF0ZSB0byBvdmVycmlkZSBhIG1hdGNoaW5nIHJlc3VsdCBkZWZhdWx0IGRpc3BsYXlcclxuICAgICAqL1xyXG4gICAgcmVzdWx0VGVtcGxhdGU6IFRlbXBsYXRlUmVmPFJlc3VsdFRlbXBsYXRlQ29udGV4dD47XHJcbiAgICAvKipcclxuICAgICogQSBjdXN0b20gY2xhc3MgdG8gYXBwZW5kIHRvIHRoZSB0eXBlYWhlYWQgd2luZG93XHJcbiAgICAgKlxyXG4gICAgICogQHNpbmNlIDkuMS4wXHJcbiAgICAqL1xyXG4gICAgcG9wdXBDbGFzczogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBFdmVudCByYWlzZWQgd2hlbiB1c2VyIHNlbGVjdHMgYSBwYXJ0aWN1bGFyIHJlc3VsdCByb3dcclxuICAgICAqL1xyXG4gICAgc2VsZWN0RXZlbnQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgYWN0aXZlQ2hhbmdlRXZlbnQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgaGFzQWN0aXZlKCk6IGJvb2xlYW47XHJcbiAgICBnZXRBY3RpdmUoKTogYW55O1xyXG4gICAgbWFya0FjdGl2ZShhY3RpdmVJZHg6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBuZXh0KCk6IHZvaWQ7XHJcbiAgICBwcmV2KCk6IHZvaWQ7XHJcbiAgICByZXNldEFjdGl2ZSgpOiB2b2lkO1xyXG4gICAgc2VsZWN0KGl0ZW06IGFueSk6IHZvaWQ7XHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBfYWN0aXZlQ2hhbmdlZDtcclxufVxyXG4iXX0=